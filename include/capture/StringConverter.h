#ifndef __STRING_CONVERTER_H__
#define __STRING_CONVERTER_H__

#include <string>
#include <sstream>

	    namespace StringConverter
	    {
		    /*========================================================================  
			    Name:       UTF8转Unicode
			    ----------------------------------------------------------  
			    Params:     [value]				UTF8字符串
		        ----------------------------------------------------------  
			    Return:    返回Unicode字符串。
		    ==========================================================================*/ 
		    std::wstring utf8_to_unicode(const std::string &value);

		    /*========================================================================  
			    Name:       Unicode转UTF8
			    ----------------------------------------------------------  
			    Params:     [value]				Unicode字符串
		        ----------------------------------------------------------  
			    Return:    返回UTF8字符串。
		    ==========================================================================*/ 
		    std::string unicode_to_utf8(const std::wstring &value);

		    /*========================================================================  
			    Name:       ANSI转Unicode
			    ----------------------------------------------------------  
			    Params:     [value]				ANSI字符串
		        ----------------------------------------------------------  
			    Return:    返回Unicode字符串。
		    ==========================================================================*/ 
		    std::wstring ansi_to_unicode(const std::string &value);

		    /*========================================================================  
			    Name:       Unicode转ANSI
			    ----------------------------------------------------------  
			    Params:     [value]				Unicode字符串
		        ----------------------------------------------------------  
			    Return:    返回ANSI字符串。
		    ==========================================================================*/ 
		    std::string unicode_to_ansi(const std::wstring &value);

		    /*========================================================================  
			    Name:       ANSI转UTF8
			    ----------------------------------------------------------  
			    Params:     [value]				ANSI字符串
		        ----------------------------------------------------------  
			    Return:    返回UTF8字符串。
		    ==========================================================================*/ 
		    std::string ansi_to_utf8(const std::string &value);

		    /*========================================================================  
			    Name:       UTF8转ANSI
			    ----------------------------------------------------------  
			    Params:     [value]				UTF8字符串
		        ----------------------------------------------------------  
			    Return:    返回ANSI字符串。
		    ==========================================================================*/ 
		    std::string utf8_to_ansi(const std::string &value);
		
		    /*========================================================================  
			    Name:       将字符串转换为其他类型
			    ----------------------------------------------------------  
			    Params:     [value]				源字符串
		        ----------------------------------------------------------  
			    Return:    返回转换后的对象。
		    ==========================================================================*/ 
		    template<class T>
		    T convert_string_to(const std::string &value);

		    /*========================================================================  
			    Name:       将其他类型转换为字符串
			    ----------------------------------------------------------  
			    Params:     [value]				源对象
		        ----------------------------------------------------------  
			    Return:    返回转换后字符串。
		    ==========================================================================*/ 
		    template<class T>
		    std::string convert_to_string(const T &value);

		    /*========================================================================  
			    Name:       URL编码
			    ----------------------------------------------------------  
			    Params:     [value]				编码前的字符串
		        ----------------------------------------------------------  
			    Return:    返回编码后的字符串。
		    ==========================================================================*/ 
		    std::string url_encode( const std::string &value );

		    /*========================================================================  
			    Name:       URL解码
			    ----------------------------------------------------------  
			    Params:     [value]				编码后的字符串
		        ----------------------------------------------------------  
			    Return:    返回编码前的字符串。
		    ==========================================================================*/ 
		    std::string url_decode( const std::string &value );


		    template<class T>
		    T convert_string_to(const std::string &value)
		    {
                std::istringstream iss(value);
			    T value;
			    iss >> value;
			    return value;
		    }

		    template<class T>
		    std::string convert_to_string(const T &value)
		    {
			    std::ostringstream oss;
			    oss << value;
			    return oss.str();
		    }
        }

#endif